require(ggplot2)
require(reshape2)
require(tidyr)
require(plyr)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
setwd("C:/Users/jelle/Dropbox/uni/jaar3/CognitiveSciencePractical/ACTR_model_output")  #Jelle ## set your workspace to the path where your output files are.
require(ggplot2)
require(reshape2)
require(tidyr)
require(plyr)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
dat<- matrix(ncol=17)
files<- c("dat-0.txt", "dat-1.txt", "dat-2.txt", "dat-3.txt", "dat-4.txt", "dat-5.txt", "dat-6.txt", "dat-7.txt", "dat-8.txt", "dat-9.txt", "dat-10.txt", "dat-11.txt",
"dat-12.txt", "dat-13.txt", "dat-14.txt", "dat-15.txt", "dat-16.txt", "dat-17.txt", "dat-18.txt", "dat-19.txt", "dat-20.txt", "dat-21.txt", "dat-22.txt", "dat-23.txt", "dat-24.txt", "dat-25.txt", "dat-26.txt", "dat-27.txt", "dat-28.txt",
"dat-29.txt", "dat-30.txt", "dat-31.txt", "dat-32.txt", "dat-33.txt", "dat-34.txt", "dat-35.txt", "dat-36.txt", "dat-37.txt", "dat-38.txt", "dat-39.txt", "dat-40.txt", "dat-41.txt", "dat-42.txt", "dat-43.txt", "dat-44.txt", "dat-45.txt", "dat-46.txt", "dat-47.txt", "dat-48.txt", "dat-49.txt", "dat-50.txt",
"dat-51.txt", "dat-52.txt", "dat-53.txt", "dat-54.txt", "dat-55.txt", "dat-56.txt", "dat-57.txt", "dat-58.txt", "dat-59.txt", "dat-60.txt", "dat-61.txt", "dat-62.txt",
"dat-63.txt", "dat-64.txt", "dat-65.txt", "dat-66.txt", "dat-67.txt", "dat-68.txt", "dat-69.txt", "dat-70.txt", "dat-71.txt", "dat-72.txt", "dat-73.txt", "dat-74.txt",
"dat-75.txt", "dat-76.txt", "dat-77.txt", "dat-78.txt", "dat-79.txt", "dat-80.txt", "dat-81.txt", "dat-82.txt", "dat-83.txt", "dat-84.txt", "dat-85.txt", "dat-86.txt",
"dat-87.txt", "dat-88.txt", "dat-89.txt", "dat-90.txt", "dat-91.txt", "dat-92.txt", "dat-93.txt", "dat-94.txt", "dat-95.txt", "dat-96.txt", "dat-97.txt", "dat-98.txt", "dat-99.txt")
for (i in files) {
# read each file in table format and create a dataframe (read.table function) and assign it to "X" below.
X<- read.table(i) ;
for (j in 1:100) {      # I provide you another for loop in order to add a new column (17th column) and add numbers to that column's rows from 1 to 100 for each file. You will use this new 17th column with numbers 1 to 100 for the x-axes in your graphs.
X$V17[j]<-j
##TODO: Fix this.
#gsub("\\(|\\)","",X$V5[j]) #Trying to remove brackts but doesn't work.
}
#now, you should combine the X and dat matrices by rows and assign it to "dat" below.
dat<- rbind(dat, X)
#now, I provide you some manupilations in the data together with their explanations
ds<-paste("",i, sep="")      #this adds " " to the name of file
ds<-substr(ds, 1, nchar(ds)-4)#this removes the last 4 char (.txt)
assign(ds, X)          # this assigns X to ds
}
dat = dat[-1,]      #this deletes the first row
dat$V16<- factor(dat$V16)
y.df<- as.data.frame(table(dat$V17, dat$V16))
y.df$proportion<- y.df$Freq/100
y.df$Var1<- factor(y.df$Var1)
y.df$Var2<- factor(y.df$Var2)
levels(y.df$Var2)[levels(y.df$Var2)=="0"] <- "Zero-order"
levels(y.df$Var2)[levels(y.df$Var2)=="1"] <- "First-order"
levels(y.df$Var2)[levels(y.df$Var2)=="2"] <- "Second-order"
y.zeroorder <- y.df[1:100,c(1,2,3,4)]
y.firstorder <- y.df[101:200,c(1,2,3,4)]
y.secondorder <- y.df[201:300,c(1,2,3,4)]
plot(0:100, 0:100, type="n")
lines(y.zeroorder$Var1, y.zeroorder$Freq, col="green")
lines(y.firstorder$Var1, y.firstorder$Freq, col="red")
lines(y.secondorder$Var1, y.secondorder$Freq, col="blue")
plot(0:100, 0:100, type="n")
lines(y.zeroorder$Var1, y.zeroorder$Freq/100, col="green")
lines(y.firstorder$Var1, y.firstorder$Freq/100, col="red")
lines(y.secondorder$Var1, y.secondorder$Freq/100, col="blue")
plot(0:100, 0:1, type="n")
plot(0:100, (0:100)/100, type="n")
lines(y.zeroorder$Var1, y.zeroorder$Freq/100, col="green")
lines(y.firstorder$Var1, y.firstorder$Freq/100, col="red")
lines(y.secondorder$Var1, y.secondorder$Freq/100, col="blue")
plot(0:100, (0:100)/100, type="n")
lines(y.zeroorder$Var1, y.zeroorder$proportion, col="green")
lines(y.firstorder$Var1, y.firstorder$proportion, col="red")
lines(y.secondorder$Var1, y.secondorder$proportion, col="blue")
View(dat)
